<% include ./sub/header %>
      <% include ./rsv_section/menu %>
      <% include ./rsv_section/left_info %>

      <template v-if="menu_step=='room'">
        <% include ./rsv_section/room %>
      </template>
      <template v-if="menu_step=='date'">
        <custom-datepicker
          :inline="true"
          :default_date="new Date()"
          :building_id="params.building_id"
          :room_id="formData.room_id"
          :min_date="info.min_date"
          :on-selected="onSelected"
          maximum-view="day"
        ></custom-datepicker>
      </template>
      <template v-if="menu_step=='time'">
        <% include ./rsv_section/time %>
      </template>

    </main>
    
    <footer>
      <% include ./sub/footer %>
    </footer>
  </div>

<% include ./component/datepicker %>
  <script>
    var global = makeGlobal();
    var app = new Vue({
      el: '#app',
      data: function () {
        return {
          header_menu_name: global.getHeaderMenuName("<%-pagename %>"),
          is_user: <%- is_user %>,
          is_admin: <%- is_admin %>,
          query : <%-JSON.stringify(query) %>,
          params : <%-JSON.stringify(params) %>,
          date: null,
          method : '<%- method %>',
          menu_step : null,
          menu_step_info : {
            'room' : '강의실 선택',
            'date' : '날짜 선택',
            'time' : '시간 선택',
            'detail' : '상세정보 입력',
            'last' : '내용 확인',
          },
          menu_steps : {
            'R' : ['room', 'date', 'time', 'detail', 'last'],
            'DT' : ['date', 'time', 'room' ,'detail', 'last'],
          },
          
          info : {
            min_date: new Date(),
            floor : null,
            room_name : null,
            room_number : null,
            date: null,
          },
          formData:{
            room_id:null,
            date:null,
            time_array: [],
          },

          rooms: {},
          holiday_results : [],
        }
      },
      methods: {
        chageMenuStep: function (menu_step) {
          var _obj = this.checkMenuStep(menu_step);
          var is_next = _obj.is_next;
          if (is_next) {
            alert('다음 단계를 선택할 수 없습니다')
          } else {
            this.menu_step = menu_step;
          }
        },
        checkMenuStep: function(menu_step) {
          var menu_step_array = this.menu_steps[this.method];
          var is_find = false;
          var is_next = false;
          var is_now = false;
          if (this.menu_step == menu_step) {
            is_now = true;
          } else {
            for (var i = 0; i < menu_step_array.length; i ++) {
              if (this.menu_step == menu_step_array[i]) {
                is_find = true;
              }
              if (menu_step == menu_step_array[i] && is_find) {
                is_next = true
              }
            }
          }

          return {
            is_next : is_next,
            is_now : is_now,
          };
        },
        menuClass: function (menu_step) {
          var _obj = this.checkMenuStep(menu_step);
          return {
            'btn btn-primary': _obj.is_now,
            'btn btn-default': !_obj.is_next,
            'btn btn-default disabled': _obj.is_next,
          }
        },
        chageMethod: function(method) {
          if (method == 'R') {
            this.menu_step = 'room';
          } else {
            this.menu_step = 'date';
          }
          this.method = method;
        },
        nextMenuStep: function() {
          var now_menu_step = this.menu_step;
          var menu_step_array = this.menu_steps[this.method];
          for (var i = 0; i < menu_step_array.length; i ++ ) {
            if(now_menu_step == menu_step_array[i] && i != menu_step_array.length - 1) {
              this.menu_step = menu_step_array[parseInt(i) + 1];
            }
          }
        },
        prevMenuStep: function() {
          var now_menu_step = this.menu_step;
          var menu_step_array = this.menu_steps[this.method];
          for (var i = 0; i < menu_step_array.length; i ++ ) {
            if (now_menu_step == menu_step_array[i]  && i != 0) {
              this.menu_step = menu_step_array[parseInt(i) - 1];
            }
          }
        },
        // ROOM
        changeRoomFloor: function(floor) {
          this.info.floor = (this.info.floor == floor) ? null : floor;
        },
        chooseRoom: function(room) {
          if (room.available_for_rsv_create != true) {
            var message = '예약 불가능 상태입니다.'
            if (!this.user) {
              message += '\n로그인 후 다시 확인해주세요.' 
            } else {
              message +=  '\n관리자로 로그인 해 주세요'
            } 

            alert(message);
          } else {
            var min_date = global.resetTime(new Date());
            min_date.setDate(min_date.getDate() + room.rsv_apply_min_day);
            this.info.min_date = min_date;

            this.info.room_number = room.room_number;
            this.info.room_name =  room.name;
            this.formData.room_id = room.room_id;
            this.nextMenuStep();
          }
        },
        getRoom: function() {
          var __this = this;
          global.ajax({
            url: '/api/room',
            type: 'GET',
            data: null,
            query: {
              building_id : this.params.building_id,
              sort_by_floor: 1,
            }
          },
          function(data, status) {
            __this.setRooms(data.results);
          },
          function(message, status, data) {
            alert(message);
          })
        },
        setRooms: function(data) {
          this.rooms = data;
        },
        // DATE
        onSelected: function(date) {
          this.formData.date = date;
          this.info.date = global.parseDate(date);
          this.nextMenuStep();
        },
        // TIME
        getAvailableTime: function() {
          var __this = this;
          global.ajax({
            url: '/api/available_time',
            type: 'GET',
            data: null,
            query: {
              building_id : this.params.building_id,
              room_id : this.formData.room_id,
              day_of_the_week : this.formData.date.getDay(),
            }
          },
          function(data, status) {
            if (data.results.length == 0) {
              __this.prevMenuStep();
              alert('예약 가능한 시간이 없습니다.')
            } else {
              __this.setAvailableTimeResults(data.results);
            }
          },
          function(message, status, data) {
            alert(message);
          })
        },
        setAvailableTimeResults: function (data) {
          this.formData.time_array = data;
        },
        getTimeArrayIndex: function(available_time_id) {
          var time_array = this.formData.time_array;
          for (var i = 0; i < time_array.length; i++) {
            if (time_array[i].available_time_id == available_time_id) {
              return i
            }
          }
        },
        clickTimeBlock: function(_time) {
          // 이미 존재하는 경우,
          // 존재하지 않는 경우,
          // 스타일 컨트롤
          var time_array = this.formData.time_array;
          var index = this.getTimeArrayIndex(_time.available_time_id);
          if (!time_array[index].is_seleted) {
            time_array[index].is_seleted = 1;
          } else {
            time_array[index].is_seleted = 0;
          }
        },
        timeBlockClass: function (is_seleted) {
          console.log('클래스!!', is_seleted)
          if (!is_seleted) {
            return 'btn btn-default'
          } else {
            return 'btn btn-primary'
          }
        },
        // DETAIL

        // LAST
        
        // =====================
        resetRoom: function() {
          this.info.floor = null;
          this.info.room_name = null;
          this.info.room_number = null;
          this.formData.room_id = null;
        },
        resetDate: function() {
          this.formData.date = null;
          this.info.date = null;
          this.info.min_date = new Date();
        },
        resetTime: function() {
          this.formData.time_array = null;
          this.info.start_time = null;
          this.info.end_time = null;
        },
      },
      watch: {
        menu_step: function (menu_step) {
          switch (menu_step) {
            case 'room':
              this.getRoom();

              this.resetRoom();
              this.resetDate();
              this.resetTime();
              break;
            case 'date':
              this.resetDate();
              break;
            default:
              this.getAvailableTime();
              break;
          }
        },
      },
      created: function() {
        this.menu_step = this.menu_steps[this.method][0];
      }
    })
  </script>

</body>

</html>