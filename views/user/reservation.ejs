<% include ../sub/header %>
      <div class="rsv_menu">
        <% include ./rsv_section/menu %>
      </div>
      <div class="rsv_body clearfix"> 
        <div class="left_info">
          <% include ./rsv_section/left_info %>
        </div>
        <div class="right_info"> 
          <template v-if="menu_step=='room'">
            <div class="step_room">
              <% include ./rsv_section/room %>
            </div>
          </template>
          <template v-else-if="menu_step=='date'">
            <div class="step_date">
              <custom-datepicker
                :inline="true"
                :default_date="new Date()"
                :building_id="params.building_id"
                :room_id="formData.room_id"
                :min_date="info.min_date"
                :on-selected="onSelected"
                maximum-view="day"
              ></custom-datepicker>
            </div>
          </template>
          <template v-else-if="menu_step=='time'">
            <div class="step_time">
              <% include ./rsv_section/time %>
            </div>
          </template>
          <template v-else>
            <div class="single_input_body" style="width: 100%;">
              <% include ./rsv_section/detail %>
            </div>
          </template>
        </div>
      </div>
    </main>

    <footer>
      <% include ../sub/footer %>
    </footer>
  </div>

  
  <% include ../component/datepicker %>
  <script type="text/javascript" src="/javascripts/validate.js"></script>
  <script>
    var global = makeGlobal();
    var app = new Vue({
      el: '#app',
      data: function () {
        return {
          header_menu_name: global.getHeaderMenuName("<%-pagename %>"),
          is_user: <%- is_user %>,
          is_admin: <%- is_admin %>,
          query : <%-JSON.stringify(query) %>,
          params : <%-JSON.stringify(params) %>,
          date: null,
          method : '<%- method %>',
          menu_step : null,
          menu_step_info : {
            'room' : '강의실 선택',
            'date' : '날짜 선택',
            'time' : '시간 선택',
            'detail' : '상세정보 입력',
            'last' : '내용 확인',
          },
          menu_steps : {
            'R' : ['room', 'date', 'time', 'detail', 'last'],
            'DT' : ['date', 'time', 'room' ,'detail', 'last'],
          },
          
          info : {
            min_date: new Date(),
            floor : null,
            room_name : null,
            room_number : null,
            date: null,
            tiem_block_type: 'blank',
            time_array: [],
          },
          formData:{
            department_id:null,
            room_id:null,
            date:null,
            time_id_list:[],
            representative_name: '',
            representative_phone: '',
          },
          rooms: {},
          holiday_results : [],
          study_group_results: [],
          department_results: [],
        }
      },
      methods: {
        chageMenuStep: function (menu_step) {
          var _obj = this.checkMenuStep(menu_step);
          var is_next = _obj.is_next;
          if (is_next) {
            alert('다음 단계를 선택할 수 없습니다')
          } else {
            this.menu_step = menu_step;
          }
        },
        checkMenuStep: function(menu_step) {
          var menu_step_array = this.menu_steps[this.method];
          var is_find = false;
          var is_next = false;
          var is_now = false;
          if (this.menu_step == menu_step) {
            is_now = true;
          } else {
            for (var i = 0; i < menu_step_array.length; i ++) {
              if (this.menu_step == menu_step_array[i]) {
                is_find = true;
              }
              if (menu_step == menu_step_array[i] && is_find) {
                is_next = true
              }
            }
          }
          return {
            is_next : is_next,
            is_now : is_now,
          };
        },
        menuClass: function (menu_step) {
          var _obj = this.checkMenuStep(menu_step);
          return {
            'btn btn-primary': _obj.is_now,
            'btn btn-default': !_obj.is_next,
            'btn btn-default disabled': _obj.is_next,
          }
        },
        leftInfoClass: function (val) {
          return {
            'btn btn-primary': val != null,
            'btn btn-gray': val == null,
          }
        },
        chageMethod: function(method) {
          if (method == 'R') {
            this.menu_step = 'room';
          } else {
            this.menu_step = 'date';
          }
          this.method = method;
        },
        nextMenuStep: function() {
          var now_menu_step = this.menu_step;
          if (now_menu_step == 'time') {
            if (this.formData.time_id_list == null || !this.formData.time_id_list[0]) {
              alert('시간을 선택해주세요');
              return;
            }
          }
          var menu_step_array = this.menu_steps[this.method];
          for (var i = 0; i < menu_step_array.length; i ++ ) {
            var new_step = menu_step_array[parseInt(i) + 1];
            if (now_menu_step == menu_step_array[i] && i != menu_step_array.length - 1) {
              if (new_step == 'last') {
                var _validate = this.validate();
                if (_validate) {
                  alert(_validate)
                  return;
                }
              }
              this.menu_step = new_step;
            }
          }
        },
        prevMenuStep: function() {
          var now_menu_step = this.menu_step;
          var menu_step_array = this.menu_steps[this.method];
          for (var i = 0; i < menu_step_array.length; i ++ ) {
            if (now_menu_step == menu_step_array[i]) {
              if (i == 0) {
                history.back();
              } else {
                this.menu_step = menu_step_array[parseInt(i) - 1];
              }
            }
          }
        },
        // ROOM
        changeRoomFloor: function(floor) {
          this.info.floor = (this.info.floor == floor) ? null : floor;
        },
        chooseRoom: function(room) {
          var message = null;
          if (room.message != null) {
            message = room.message;
          } else if (room.available_for_rsv_create != true) {
            message = '설정상 예약 불가능합니다 (로그인 후 다시 예약해주세요)'
          } else {
            var min_date = new Date();
            min_date.setDate(min_date.getDate() + room.rsv_apply_min_day);
            this.info.min_date = min_date;
            // 오류.. MIN DATE!!!!!!
            this.info.room_number = room.room_number;
            this.info.room_name =  room.name;
            this.formData.room_id = room.room_id;
            this.nextMenuStep();
          }
          if (message != null) 
            alert(message);
        },
        getRoom: function() {
          var __this = this;
          global.ajax({
            url: '/api/room',
            type: 'GET',
            data: null,
            query: {
              building_id : this.params.building_id,
              sort_by_floor: 1,
              date: global.parseDate(this.formData.date),
              time_id_list: this.formData.time_id_list,
            }
          },
          function(data, status) {
            if (data.results && Object.keys(data.results).length > 0) {
              __this.setRooms(data.results);
            } else {
              alert('등록된 강의실을 찾을수 없습니다.')
              __this.prevMenuStep();
            }
          },
          function(message, status, data) {
            alert(message);
          })
        },
        setRooms: function(results) {
          this.rooms = results;
        },
        // DATE
        onSelected: function(date) {
          this.formData.date = date;
          this.info.date = global.parseDate(date);
          this.nextMenuStep();
        },
        // TIME
        getAvailableTime: function() {
          var __this = this;
          global.ajax({
            url: '/api/available_time',
            type: 'GET',
            data: null,
            query: {
              building_id : this.params.building_id,
              room_id : this.formData.room_id,
              date : global.parseDate(this.formData.date),
              day_of_the_week : this.formData.date.getDay(),
            }
          },
          function(data, status) {
            var results = data.results;
            if (!data.is_active) {
              __this.prevMenuStep();
              alert('예약 가능한 시간이 없습니다.')
            } else {
              __this.setAvailableTimeResults(results);
            }
          },
          function(message, status, data) {
            alert(message);
          })
        },
        setAvailableTimeResults: function (data) {
          this.info.time_array = data;
        },
        getTimeArrayIndex: function(available_time_id) {
          var time_array = this.info.time_array;
          for (var i = 0; i < time_array.length; i++) {
            if (time_array[i].available_time_id == available_time_id) {
              return i
            }
          }
        },
        resetTimeBlockSelected: function() {
          var time_array =  this.info.time_array;
          for (var i = 0; i < time_array.length; i++) {
            time_array[i].is_seleted = 0;
          }
          this.info.start_time = null;
          this.info.end_time = null;
          this.formData.time_id_list = [];
        },
        clickTimeBlock: function(_time) {
          var time_array = this.info.time_array;
          var _available_time_id = _time.available_time_id;
          var find_on_first = false;
          var reset_flag = false;
          
          for (var i = 0; i < time_array.length; i++) {
            var is_find = time_array[i].available_time_id == _available_time_id;
            if (this.info.tiem_block_type == 'blank') {
              if (is_find) {
                time_array[i].is_seleted = 1;
                this.info.tiem_block_type = 'fisrt';
                this.info.start_time = time_array[i];
                this.formData.time_id_list.push(time_array[i].available_time_id);
                break;
              }
            } else  {
              if (is_find && (!find_on_first || time_array[i].is_seleted == 1)) {
                reset_flag = true;
                break;
              } 
              if (time_array[i].is_seleted == 1) {
                find_on_first = true;
              }
              if (find_on_first) {
                if (time_array[i].is_active != 1) {
                  break;
                }
                if (time_array[i].is_seleted != 1) {
                  this.formData.time_id_list.push(time_array[i].available_time_id);
                }
                time_array[i].is_seleted = 1;
                if (is_find) {
                  this.info.end_time = time_array[i];
                  this.info.tiem_block_type = 'second';
                  break;
                }
              }
            }
          }
          
          if (reset_flag) {
            this.info.tiem_block_type = 'blank'
            this.resetTimeBlockSelected();
          }
        },
        timeBlockClass: function (_time) {
          if (!_time.is_seleted) {
            var start_time = this.info.start_time;
            var end_time = this.info.end_time;
            return 'btn btn-default'
          } else {
            return 'btn btn-primary'
          }
        },
        // DETAIL
        changeDepartment: function() {
          this.getStudyGroup();
        },
        setDepartment: function(results,department_id) {
          this.department_results = results;
          this.formData.department_id = department_id;
        },
        setStudyGroupResults: function(data) {
          this.study_group_results = data;
        },
        getDepartment: function() {
          var __this = this;
          global.ajax({
            url: '/api/departemnt',
            type: 'GET',
            data: null,
          },
          function(data, status) {
            __this.setDepartment(data.results, data.department_id);
          },
          function(message, status, data) {
            alert(message);
          })
        },
        getStudyGroup: function() {
          var __this = this;
          global.ajax({
            url: '/api/study_group',
            type: 'GET',
            data: null,
            query: {
              department_id: this.formData.department_id,
              building_id: this.params.building_id,
              is_join: this.is_user ? 1 : 0,
            }
          },
          function(data, status) {
            var results = data.results;
            __this.setStudyGroupResults(results);
          },
          function(message, status, data) {
            alert(message);
          })
        },
        getPersonInfo: function() {
          if (this.is_user) {
            var __this = this;
            global.ajax({
              url: '/auth/me',
              type: 'GET',
              data: null,
              query: {
                is_personal: 1,
              }
            },
            function(data, status) {
              __this.setRepresentative(data.result)
              __this.getStudyGroup();
            },
            function(message, status, data) {
              alert(message);
            })
          } else {
            this.getStudyGroup();
          }
        },
        setRepresentative: function(person) {
          this.formData.department_id = person.department_id;
          this.formData.representative_name = person.name;
          this.formData.representative_phone = person.phone;
        },
        // LAST
        detailSubmit: function(e) {
          e.preventDefault();
          if (this.menu_step == 'detail') {
            this.nextMenuStep();
          } else {
            var _validate = this.validate();
            if (_validate) {
              alert(_validate)
            } else {
              this.formData.building_id = this.params.building_id,
              global.ajax({
                url: '/api/room_rsv',
                type: 'POST',
                data: this.formData,
              },
              function(data, status) {
                alert(data.message);
                location.href = '/reservation/single/' + data.insertId;
              },
              function(message, status, data) {
                alert(message);
              })
            }
          }
        },
        validate: function (params) {
           var _validate = validate(this.formData, {
              'room_id': {
                is_require: true,
              },
              'title': {
                is_require: true,
              },
              'date': {
                is_require: true,
              },
              'department_id': {
                is_require: true,
              },
              'study_group_id': {
                is_require: false,
              },
              'student_count': {
                is_require: false,
              },
              'non_student_count': {
                is_require: false,
              },
              'representative_name': {
                is_require: true,
              },
              'representative_phone': {
                is_require: true,
              },
              'description': {
                is_require: false,
              },
            });
            return _validate;
        },
        // =====================
        resetRoom: function() {
          this.info.floor = null;
          this.info.room_name = null;
          this.info.room_number = null;
          this.formData.room_id = null;
          this.info.min_date = new Date();
        },
        resetDate: function() {
          this.formData.date = null;
          this.info.date = null;
        },
        resetTime: function() {
          this.info.time_array = null;
          this.info.start_time = null;
          this.info.end_time = null;

          this.formData.time_id_list = [];
        },
        resetDetail: function() {
          this.formData.department_id = null;
          this.formData.study_group_id = null;
          this.formData.student_count = null;
          this.formData.non_student_count = null;
          this.formData.representative_name = null;
          this.formData.representative_phone = null;
          this.formData.description = null;
        },
      },
      watch: {
        menu_step: function (menu_step) {
          if (this.method=='R') {
            switch (menu_step) {
              case 'room':
                this.resetRoom();
                this.resetDate();
                this.resetTime();
                this.getRoom();
                break;
              case 'date':
                this.resetDate();
                this.resetTime();
                break;
              case 'time':
                this.resetTime();
                this.resetDetail();
                this.getAvailableTime();
                break;
              case 'detail':
                this.resetDetail();
                this.getDepartment();
                this.getPersonInfo();
                
                break;
            }
          } else {
            switch (menu_step) {
              case 'date':
                this.resetDetail();
                this.resetRoom();
                this.resetTime();
                this.resetDate();
                break;
              case 'time':
                this.resetDetail();
                this.resetRoom();
                this.resetTime();
                this.getAvailableTime();
                break;
              case 'room':
                this.resetDetail();
                this.resetRoom();
                this.getRoom();
                break;
              case 'detail':
                this.resetDetail();
                this.getDepartment();
                this.getPersonInfo();

                break;
            }
          }
        },
      },
      created: function() {
        this.menu_step = this.menu_steps[this.method][0];
      }
    })
  </script>

</body>

</html> 