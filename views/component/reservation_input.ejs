<script type="text/x-template" id="input-template">
    <form class="`form-lnline" v-on:submit="onSubmitForm">
      <div class="single_input_body">
        <div class="pack_div clearfix">
          <div class="div_left">
            <label>상태</label>
          </div>
          <div class="div_right">
            <template v-if="mod!='POST'">
              <label :class="classRsvStatus(room_rsv.rsv_status)" style="margin-right: 2%;">{{ room_rsv.rsv_status_name }}</label>
              <button 
                type="button" 
                class="btn btn-info"
                v-if="is_adminpage && mod=='GET'"
                @click="chageRsvStatus($event, room_rsv, global.REQ_RSV_STATUS)">요청</button> 
              <button 
                type="button" 
                class="btn btn-success"
                v-if="is_adminpage && mod=='GET'"
                @click="chageRsvStatus($event, room_rsv, global.SUBMIT_RSV_STATUS)">승인</button> 
              <button 
                type="button" 
                class="btn btn-danger"
                v-if="is_adminpage && mod=='GET'"
                @click="chageRsvStatus($event, room_rsv, global.CANCEL_RSV_STATUS)">취소</button>
            </template>
            <select v-else class="form-control" v-model="room_rsv.rsv_status">
              <option v-for="(status, i) in rsv_status_results" v-bind:value="status.rsv_status"
                :selected="room_rsv.rsv_status == status.rsv_status" :key="i">
                {{ status.name }}
              </option>
            </select>
          </div>
        </div>

        <div class="pack_div clearfix">
          <div class="div_left">
            <label>카테고리</label>
          </div>
          <div class="div_right">
            <template v-if="mod=='GET'">
              <p>{{ room_rsv.room_rsv_category_name }}</p>
            </template>
            <select v-else class="form-control" v-model="room_rsv.room_rsv_category_id">
              <option v-for="(room_rsv_category, i) in room_rsv_category_results" v-bind:value="room_rsv_category.room_rsv_category_id" :key="i">
                {{ room_rsv_category.name }}
              </option>
            </select>
          </div>
        </div>

        <div class="pack_div clearfix">
          <div class="div_left">
            <label>제목</label>
          </div>
          <div class="div_right">
            <template v-if="mod=='GET'">
              <p>{{ room_rsv.title }}</p>
            </template>
            <input v-else type="text" class="form-control" v-model="room_rsv.title" placeholder="제목을 입력해주세요" :disabled="mod == 'GET'">
          </div>
        </div>
        
        <div class="pack_div clearfix">
          <div class="div_left">
            <label>날짜</label>
          </div>
          <div class="div_right">
            <template v-if="mod!='POST'">
              <p>{{ room_rsv.rsv_date }}</p>
            </template>
              <template v-else="mod=='POST'">
                <custom-datepicker
                  :inline="false"
                  :selected_date="room_rsv.date" 
                  :default_date="new Date()"
                  :building_id="building_id"
                  :on-selected="onSelected"
                ></custom-datepicker>
              </template>
          </div>
        </div>

        <div class="form-inline pack_div clearfix">
          <div class="div_left">
            <label>타임블럭</label>
          </div>
          <div class="div_right">
            <div class="block_gruop clearfix">
              <div class="block" v-for="(room_rsv_time, i) in room_rsv_time_list" >
                <button
                class="btn btn-default item"
                v-bind:value="room_rsv_time.room_rsv_time_id" 
                :key="i"
                disabled
                >{{room_rsv_time.start_time}} ~ {{room_rsv_time.end_time}}</button>
                <button 
                type="button" 
                class="btn btn-danger delete" 
                @click="deleteRsvTime(i)"
                v-if="mod!='GET'"
                >-</button>
              </div>
              <div v-if="mod!='GET'">
                <custom-timepicker
                  :add-time="addTime"
                ></custom-timepicker>
              </div>
            </div>
          </div>
        </div>

        <div class="form-inline pack_div clearfix">
          <div class="div_left">
            <label>강의실</label>
          </div>
          <div class="div_right">
            <div class="block_gruop clearfix">
              <div class="block" v-for="(room, i) in room_to_use_list" >
                <button
                class="btn btn-default item"
                v-bind:value="room.room_id" 
                :key="i"
                disabled
                >{{room.room_number}}({{room.name}})</button>
                <button 
                type="button" 
                class="btn btn-danger delete" 
                @click="deleteRoom(i)"
                v-if="mod!='GET'"
                >-</button>
              </div>
              <div v-if="mod!='GET'" class="add_block">
                <div class="center">
                  <select style="width: 85%;"class="form-control" v-model="room_index">
                    <option v-for="(room, i) in room_results" v-bind:value="i" :key="i">
                      {{ room.name }}
                    </option>
                  </select>
                  <button 
                    type="button" 
                    class="btn btn-primary" 
                    @click="addRoom($event)"
                    v-if="mod!='GET'"
                  >+</button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="pack_div clearfix">
          <div class="div_left">
            <label>학과</label>
          </div>
          <div class="div_right">
            <template v-if="mod=='GET'">
              <p>{{ room_rsv.department_name }}</p>
            </template>
            <select v-else class="form-control" v-model="room_rsv.department_id" @change="chageDepartment">
              <option v-for="(department, i) in department_results" v-bind:value="department.department_id" :key="i">
                {{ department.name }}
              </option>
            </select>
          </div>
        </div>

        <div class="pack_div clearfix">
          <div class="div_left">
            <label>스터디</label>
          </div>
          <div class="div_right">
            <template v-if="mod=='GET'">
              <p>{{ room_rsv.study_group_name }}</p>
            </template>
            <select v-else class="form-control" v-model="room_rsv.study_group_id" :disabled="!room_rsv.department_id">
              <option v-for="(study_group, i) in study_group_results" v-bind:value="study_group.study_group_id" :key="i">
                {{ study_group.name }}
              </option>
            </select>
          </div>
        </div>

        <div class="pack_div clearfix">
          <div class="div_left">
            <label>인원</label>
          </div>
          <div class="div_right">
            <div class="text-left">
              <span>학생</span>
              <template v-if="mod=='GET'">
                {{ room_rsv.student_count }}
              </template>
              <input v-else type="number" class="form-control" v-model="room_rsv.student_count"  placeholder="예상 참여 인원을 입력해주세요" :disabled="mod == 'GET'">
            </div>
            <div class="text-left">
              <span>비학생</span>
              <template v-if="mod=='GET'">
                {{ room_rsv.non_student_count }}
              </template>
              <input v-else type="number" class="form-control" v-model="room_rsv.non_student_count"  placeholder="예상 참여 인원을 입력해주세요" :disabled="mod == 'GET'">
            </div>
          </div>
        </div>

        <div class="pack_div clearfix">
          <div class="div_left">
            <label>대표</label>
          </div>
          <div class="div_right">
            <div class="text-left">
              <span>성명</span>
              <template v-if="mod=='GET'">
                {{ room_rsv.representative_name }}
              </template>
              <input v-else type="text" class="form-control" v-model="room_rsv.representative_name"  placeholder="성명을 입력해주세요" :disabled="mod == 'GET'">
            </div>
            <div class="text-left">
              <span>전화번호</span>
              <template v-if="mod=='GET'">
                {{ room_rsv.representative_phone }}
              </template>
              <input v-else type="text" class="form-control" v-model="room_rsv.representative_phone"  placeholder="전화번호를 입력해주세요" :disabled="mod == 'GET'">
            </div>
          </div>
        </div>
        

        <div class="pack_div clearfix" v-if="mod!='POST'">
          <div class="div_left">
            <label>업데이트</label>
          </div>
          <div class="div_right">
            <p>{{room_rsv.datetime_last_updated}}</p>
          </div>
        </div>

        <div class="pack_div clearfix" v-if="mod!='POST'">
          <div class="div_left">
            <label>생성</label>
          </div>
          <div class="div_right">
            <p>{{room_rsv.datetime_created}}</p>
          </div>
        </div>

        <div class="pack_div clearfix" v-if="mod!='POST' && is_admin && room_rsv.email != null">
          <div class="div_left">
            <label>생성자</label>
          </div>
          <div class="div_right">
            <a v-bind:href="'/admin/user/single/' + room_rsv.user_id"> {{ displayName }} </a>
          </div>
        </div>

        <div class="single_button">
          <button type="button" class="btn btn-warning" v-if="is_adminpage && is_admin==1 && mod=='GET'" @click="setMod('PUT', $event)">수정</button>

          <button 
          type="button" 
          class="btn btn-danger" 
          v-if="mod=='GET' && (is_adminpage || (room_rsv.is_mine == 1 && room_rsv.rsv_status == global.REQ_RSV_STATUS))"
          @click="deleteRsv($event, room_rsv)">
          삭제
          </button>
          <button 
          type="button" 
          class="btn btn-warning" 
          v-if="!is_adminpage && room_rsv.is_mine == 1 && room_rsv.rsv_status == global.SUBMIT_RSV_STATUS"
          @click="cancelRsv($event, room_rsv)">
          예약 취소
          </button>

          <button type="submit" class="btn btn-primary" v-if="mod!='GET'">제출</button>
        </div>
    </div>
  </form>
</script>

<% include ../component/datepicker %>
<% include ../component/timepicker %>
<script type="text/javascript" src="/javascripts/validate.js"></script>
<script>
  Vue.component('room_rsv-input', {
    template: '#input-template',
    props: {
      is_adminpage: Boolean,
      mod: String,
      is_admin: Number,
      building_id: Number,
      room_rsv: Object,
      rsv_status_results: Array,
      room_rsv_category_results: Array,
      department_results: Array,
    },
    data: function () {
      return {
        room_rsv_time_list: [],
        room_to_use_list: [],

        study_group_results: [],
        room_results: [],
        room_index: null,
      }
    }, 
    methods: {
      onSelected: function(selected_date) {
        if (selected_date != null) {
          selected_date = global.parseDate(selected_date)
        }
        this.room_rsv.date = selected_date;
      },
      addTime: function(start_time, end_time) {
        var room_rsv_time_list = this.room_rsv_time_list;
        var flag = false;
        var start = new Date('1970/1/1 ' + start_time);
        var end = new Date('1970/1/1 ' + end_time);
        for (var i = 0; i < room_rsv_time_list.length; i++) {
          var _start = new Date('1970/1/1 ' + room_rsv_time_list[i].start_time);
          var _end = new Date('1970/1/1 ' + room_rsv_time_list[i].end_time);
          if (_start < end && _end > start) {
            flag = true;
          }
        }
        
        if (flag) {
          alert('겹치는 시간을 확인해주세요');
        } else {
          this.room_rsv_time_list.push({
            start_time: start_time,
            end_time: end_time,
          });
          global.sortByKey(this.room_rsv_time_list, 'start_time');
        }
      },
      deleteRsvTime: function(index) {
        this.room_rsv_time_list.splice(index, 1)
      },
      deleteRoom: function(index) {
        this.room_to_use_list.splice(index, 1)
      },
      addRoom: function() {
        var room = this.room_results[this.room_index];
        for (var i = 0; i < this.room_to_use_list.length; i++) {
          if (this.room_to_use_list[i].room_id == room.room_id) {
            alert('이미 추가된 강의실입니다');
            return;
          }
        }
        this.room_to_use_list.push(room);
        global.sortByKey(this.room_to_use_list, 'room_number');
      },

      deleteRsv: function(e, room_rsv) {
        if (e) {
          e.preventDefault();
        }
        var conf = confirm("정말 삭제하시겠습니까?");
        if (conf) {
          var url = '/api/room_rsv/' + room_rsv.room_rsv_id;
          var __this;
          global.ajax({
            url: url,
            type: 'DELETE',
          },
          function (data, status) {
            alert(data.message);
            if (__this.is_adminpage) {
              location.href='/admin/room_rsv/lookup?page=1'
            } else {
              if (__this.building_id) {
                location.href='/room_rsv/lookup/' + __this.building_id +'?page=1&is_mine=1'
              } else {
                location.href='/'
              }
            }
          },
          function (message, status, data) {
            alert(message);
          });
        }
      },
      cancelRsv: function(e, room_rsv) {
        if (e) {
          e.preventDefault();
        }
        var url = '/api/room_rsv/cancel/' + room_rsv.room_rsv_id;
        global.ajax({
          url: url,
          type: 'PUT',
        },
        function (data, status) {
          alert(data.message);
        },
        function (message, status, data) {
          alert(message);
        });
      },
      chageRsvStatus: function(e, room_rsv, rsv_status) {
        if (e) {
          e.preventDefault();
        }
        var url = '/api/room_rsv/status/' + room_rsv.room_rsv_id;
        global.ajax({
          url: url,
          type: 'PUT',
          data: {
            rsv_status: rsv_status,
          },
        },
        function (data, status) {
          alert(data.message);
          location.reload();
        },
        function (message, status, data) {
          alert(message);
        });
      },
      setMod: function(mod, e) {
        if (e) {
          e.preventDefault();
        }
        if (mod == 'PUT') {
          this.getStudyGroupResults()
        }
        this.mod = mod;
      },
      onSubmitForm: function(e) {
        e.preventDefault();
        
        var mod = this.mod;
        
        var _validate = validate(this.room_rsv, {
          'rsv_status': {
            is_require: this.mod == 'POST' ? true : false,
          },
          'date': {
            is_require: this.mod == 'POST' ? true : false,
          },
          'room_rsv_category_id': {
            is_require: true,
          },
          'department_id': {
            is_require: false,
          },
          'study_group_id': {
            is_require: false,
          },
          'title': {
            is_require: true,
          },
          'student_count': {
            is_require: false,
          },
          'non_student_count': {
            is_require: false,
          },
          'representative_name': {
            is_require: false,
          },
          'representative_phone': {
            is_require: false,
          },
          'description': {
            is_require: false,
          },
        });
        if (_validate) {
          alert(_validate);
        } else {
          var need_location_href = mod == 'POST' ? true : false;
          var url = '/api' + (mod=='POST' ? '/admin' : '') + '/room_rsv' 
            + (mod == 'PUT' ? '/'+ this.room_rsv.room_rsv_id : '');
          var body  =  {
            room_rsv_category_id: this.room_rsv.room_rsv_category_id,
            department_id: this.room_rsv.department_id,
            study_group_id: this.room_rsv.study_group_id,
            title: this.room_rsv.title,
            student_count: this.room_rsv.student_count,
            non_student_count: this.room_rsv.non_student_count,
            representative_name: this.room_rsv.representative_name,
            representative_phone: this.room_rsv.representative_phone,
            description: this.room_rsv.description,
            rsv_status: this.room_rsv.rsv_status,
            date: this.room_rsv.date,
          };
  
          var time_list = [];
          var room_id_list = [];
          for (var i = 0; i < this.room_to_use_list.length; i++) {
            room_id_list.push(this.room_to_use_list[i].room_id)
          }
          body.time_list = this.room_rsv_time_list;
          body.room_id_list = room_id_list;
  
          var __this = this;
          global.ajax({
            url: url,
            type: mod,
            data: body,
          },
          function (data, status) {
            alert(data.message);
            if (need_location_href) {
              location.href= (is_adminpage ? '/admin' : '') + '/room_rsv/lookup?page=1'
            } else {
              if (mod=='POST') {
                location.href = (is_adminpage ? '/admin' : '') + '/room_rsv/single/' + data.insertId;
              } else {
                __this.setMod('GET');
              }
            }
          },
          function (message, status, data) {
            alert(message);
          });
        }
      },
      classRsvStatus: function(rsv_status) {
        return {
          'bg-info': rsv_status == global.REQ_RSV_STATUS,
          'bg-danger': rsv_status == global.CANCEL_RSV_STATUS,
          'bg-warning': rsv_status == global.CANCEL_REQ_RSV_STATUS,
          'bg-success': rsv_status == global.SUBMIT_RSV_STATUS,
        }
      },
      chageDepartment: function() {
        this.room_rsv.study_group_id = null;
        this.getStudyGroupResults();
      },
      getStudyGroupResults: function() {
        var __this = this;
        global.ajax({
          url: '/api/study_group' + global.serializeQuery({
            department_id: this.room_rsv.department_id,
          }),
          type: 'GET',
        },
        function (data, status) {
          __this.study_group_results = data.results;
        },
        function (message, status, data) {
          alert(message);
        });
      },
      getRoomResults: function() {
        var __this = this;
        global.ajax({
          url: '/api/room' + global.serializeQuery({
            building_id: this.building_id,
          }),
          type: 'GET',
        },
        function (data, status) {
          __this.room_results = data.results;
        },
        function (message, status, data) {
          alert(message);
        });
      },
      getRoomRsvTime: function() {
        var __this = this;
        global.ajax({
          url: '/api/room_rsv_time/' + room_rsv.room_rsv_id,
          type: 'GET',
        },
        function (data, status) {
          __this.room_rsv_time_list = data.results;
        },
        function (message, status, data) {
          alert(message);
        });
      },
      getRoomToUse: function() {
        var __this = this;
        global.ajax({
          url: '/api/room_to_use/' + room_rsv.room_rsv_id,
          type: 'GET',
        },
        function (data, status) {
          __this.room_to_use_list = data.results;
        },
        function (message, status, data) {
          alert(message);
        });
      },
    },
    computed: {
      displayName: function() {
        var name = room_rsv.name;
        if (room_rsv.student_number != null) {
          name += ' (' +  room_rsv.student_number + ')'
        }
        return name;
      },
    },
    watch: {
      mod: function (newMod) {
        if (newMod == 'PUT') {
          this.getRoomResults();
        }
      }
    },
    created: function() {
      if (this.mod != 'POST') {
        this.getRoomRsvTime()
        this.getRoomToUse()
      } else {
        this.room_rsv =  {
          rsv_status: null,
          room_rsv_category_id: null,
          department_id: null,
          study_group_id: null,
          title: null,
          student_count: null,
          non_student_count: null,
          representative_name: null,
          representative_phone: null,
          description: null,
          date: null,
        };
        this.getRoomResults();
      }
    }
  })
</script>