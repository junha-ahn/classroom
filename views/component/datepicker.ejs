<script type="text/javascript" src="https://unpkg.com/vuejs-datepicker"></script>
<script type="text/javascript" src="https://unpkg.com/vuejs-datepicker/dist/locale/translations/ko.js"></script>

<script type="text/x-template" id="datepicker-template">
  <div>
    <vuejs-datepicker
      @selectedDisabled="selectedDisabled"
      @changedMonth="changedMonth"
      @selected="selected"
      :highlighted="state.highlighted"
      :disabled-dates="state.disabledDates"
      :inline="inline"
      :format="customFormatter"
      :language="ko"
      :monday-first="true"
      :open-date="state.default_date"
      :maximum-view="maximumView"
      v-model="selected_date"
    />
  </div>
</script>

<script>
  Vue.component('custom-datepicker', {
    template: '#datepicker-template',
    props: {
      inline: Boolean,
      couldSelecteBeforeToday: Boolean,
      maximumView: String,
      default_date: Date,
      building_id: Number,
      room_id: Number,
      onSelected: Function,
    },
    data: function(){ 
      return {
        ko: vdp_translation_ko.js,
        selected_date: null,
        room_id: this.room_id,
        holiday_results: [],
        year: this.default_date.getFullYear(),
        month: this.default_date.getMonth() + 1,
        state: {
          default_date: this.default_date,
          disabledDates: {
            ranges: [],
          },
          highlighted: {
            days: [6, 0], 
            includeDisabled: false // Highlight disabled dates
          },
        },
      }
    },
    methods: {
      selected: function(date, event) {
        //preventDefault

        /*
        1. 이벤트 객체?? 를 받은 다음에 중지 시키는법.
        2. 직접 selected 클래스를 추가하는법
        */
        console.log(date, event)
        var now = global.resetTime((new Date()));
        date = global.resetTime(date)
        console.log('::', global.parseDateTimeFromDB(date))
        if (this.shoudSelecteBeforeToday == true && date < now) {
           cosnole.log('넌 노노!')
        } else {
          this.onSelected(date)
        }
      },
      selectedDisabled: function(object) {
        var selected_date = global.resetTime(new Date(object.timestamp))
        var holiday_results = this.holiday_results;
        for (var i = 0; i < holiday_results.length; i++) {
          var start_date = global.resetTime(new Date(holiday_results[i].start_date));
          if (start_date <= selected_date) {
            var end_date =global.resetTime(new Date(holiday_results[i].end_date));
            if (end_date >= selected_date) {
              alert('[ '+ holiday_results[i].name+ ' ] \n'+ '다른 날짜를 선택해주세요');
            }
          }
        }
      },
      changedMonth: function(object) {
        var date = null;
        if (object.timestamp) {
          date = new Date(object.timestamp);
        } else {
          date = new Date(object);
        }
        this.year = date.getFullYear();
        this.month = parseInt(date.getMonth()) + 1;
        this.getHoliday();
      },
      customFormatter: function(date) {
        return global.parseDateFromDB(date);
      },
      setHolidayResults: function(value) {
        this.holiday_results = value;
      },
      setDisbeldDates: function(ranges) {
        this.state.disabledDates.ranges = ranges;
      },
      getHoliday: function() {
        let __this = this;
        global.ajax({
          url: '/api/holiday',
          type: 'GET',
          data: null,
          query: {
            building_id : this.building_id,
            room_id: this.room_id,
            year: this.year,
            month: this.month,
          },
        },
        function(data, status) {
          var holiday_results = data.results;
          __this.setHolidayResults(holiday_results)

          var ranges = [];
          var dates = [];
          for (var i = 0; i < holiday_results.length; i++) {
            var from = global.resetTime(new Date(holiday_results[i].start_date))
            var to = global.resetTime(new Date(holiday_results[i].end_date))
            ranges.push({
              from: from,
              to:to.setDate(to.getDate() + 1),
            });
          }
          __this.setDisbeldDates(ranges);
        },
        function(message, status, data) {
          alert(message);
        })
      },
    },
    created: function() {
      this.getHoliday();
    },
    components: {
      vuejsDatepicker: vuejsDatepicker,
    },
  })
</script>